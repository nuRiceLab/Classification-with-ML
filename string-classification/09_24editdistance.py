# -*- coding: utf-8 -*-
"""09/24EditDistance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15th5LNjvRIasv9BILcYiiYpdeMDs385S
"""

pip install editdistance

pip install fuzzywuzzy[speedup]

import editdistance
import pandas as pd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def cleaning(pd_series):

    """
    input a pandas series
    change into pd series, lowercase, unify left and right, get rid of special characters
    ouput the cleaned pandas dataframe (0, 'length')
    """
    # make a copy of the pd_series
    pd_data = pd_series.copy()

    # lowercase all the strings
    pd_data = pd_data.str.lower()

    # get rid of fs
    fs = r'^fs'
    pd_data = pd_data.str.replace(fs, '')

    # get rid of numbers and brackets
    number_brac = r'[()\d]'
    pd_data = pd_data.str.replace(number_brac, '')

    # transform left and right
    #left = r'(_l$)|(\sl$)|(\slt$)|(\sl\s)|(\slt\s)|(^l\s)|(^l_)|(^lt)|(_l\s)'
    left = r'(_l$)|(\sl$)|(\slt(?!o|e))|(\sl\s)|(\slt\s)|(^l\s)|(^l_)|(^lt)|(_l\s)|(-lt(?!o|e))|(_lf)|(-lf)|(_lt(?!o|e))|(_lft$)'

    pd_data = pd_data.str.replace(left, 'left')
    #pd_data = pd_data.str.match('left')

    # right
    #right = r'(_r$)|(\sr$)|(\srt$)|(\sr\s)|(\srt\s)|(^r\s)|(^r_)|(_r\s)|(^rt(?!v))|(_rg)|(-rg)|(-rt$)'
    right = r'(_r$)|(\sr$)|(\srt$)|(\sr\s)|(\srt\s)|(^r\s)|(^r_)|(_r\s)|(^rt(?!v))|(_rg)|(-rg)|(-rt(?!v))|(_rt(?!v))'
    pd_data = pd_data.str.replace(right, 'right')

    # determine the special characters
    special_chars = r'[-_.\s()\d>%+?]'
    pd_data = pd_data.str.replace(special_chars, '')

    return pd_data

reference = pd.read_excel('nomenclature.xls')

reference.head()

comparison_terms = reference[['TG263-Primary Name', 'TG-263-Reverse Order Name']]

# clean the terms
col1 = cleaning(comparison_terms['TG263-Primary Name'])
col2 = cleaning(comparison_terms['TG-263-Reverse Order Name'])

comparison_terms_lower = pd.DataFrame({'Primary_Name': comparison_terms['TG263-Primary Name'],
                                       'Lower_Name': col1, 'Lower_Reverse_Name': col2})

comparison_terms_lower.head()

# Open SampleData_1500
with open('SampleData_1500.txt', 'r') as file:
    # Read all the lines of the file into a list
    data1500 = file.read().splitlines()

# Open SampleData_20000
with open('SampleData_20000.txt', 'r') as file:
    # Read all the lines of the file into a list
    data20000 = file.read().splitlines()

pd_data1500_raw = pd.Series(data1500)
pd_data20000_raw = pd.Series(data20000)

pd_data1500_clean = cleaning(pd_data1500_raw)
pd_data20000_clean = cleaning(pd_data20000_raw)

comparison_terms_set = set(comparison_terms_lower['Lower_Name']) | set(comparison_terms_lower['Lower_Reverse_Name'])

# Using fuzzywuzzy, partial ratio
comparison_terms_set = set(comparison_terms_lower['Lower_Name']) | set(comparison_terms_lower['Lower_Reverse_Name'])
dict_word_1 = {}

for word in pd_data1500_clean.str.lower():
    label = 'NaN'
    min_ratio = 60

    for compare_word in comparison_terms_set:
        if type(compare_word) == float:
          continue

        edit_ratio = fuzz.partial_ratio(word, compare_word)

        if edit_ratio <= min_ratio:
            continue
        temp_ratio = edit_ratio
        if temp_ratio > min_ratio:
          label = compare_word
          min_ratio = temp_ratio
        if min_ratio == 100:
          break

    dict_word_1[word] = label

# Using fuzzywuzzy
comparison_terms_set = set(comparison_terms_lower['Lower_Name']) | set(comparison_terms_lower['Lower_Reverse_Name'])
dict_word_2 = {}

for word in pd_data1500_clean.str.lower():
    label = 'NaN'
    min_ratio = 60

    for compare_word in comparison_terms_set:
        if type(compare_word) == float:
          continue

        edit_ratio = fuzz.ratio(word, compare_word)

        if edit_ratio <= min_ratio:
            continue
        temp_ratio = edit_ratio
        if temp_ratio > min_ratio:
          label = compare_word
          min_ratio = temp_ratio
        if min_ratio == 100:
          break

    dict_word_2[word] = label

# Faster way, edit distance
comparison_terms_set = set(comparison_terms_lower['Lower_Name']) | set(comparison_terms_lower['Lower_Reverse_Name'])
dict_word_3 = {}

for word in pd_data1500_clean.str.lower():
    label = 'NaN'
    min_length = len(word)

    for compare_word in comparison_terms_set:
        if type(compare_word) == float:
          continue

        edit_distance = editdistance.eval(word, compare_word)

        if edit_distance >= min_length:
            continue

        tem_length = min(edit_distance, len(word), len(compare_word))
        if tem_length == edit_distance and edit_distance <= (min(len(word), len(compare_word)) / 2):
            label = compare_word
            min_length = tem_length
            if min_length == 0:
                break

    dict_word_3[word] = label

# Put fuzzy and edit distance together
pd_edit_distance = pd.DataFrame.from_dict(dict_word_3, orient = 'index' )
pd_fuzzy_ratio = pd.DataFrame.from_dict(dict_word_2, orient = 'index' )
pd_fuzzy_partialratio = pd.DataFrame.from_dict(dict_word_1, orient = 'index' )

pd_data1500 = pd.concat([pd_edit_distance, pd_fuzzy_partialratio, pd_fuzzy_ratio], axis = 1)

pd_data1500.to_csv('data1500_comparison3.csv')

# data20000
dict_word2 = {}
for word in pd_data20000_clean:
  label = 'NaN'
  min_length = len(word)
  #print("It's term for " + word + " the length is ", len(word))
  for compare_word1 in comparison_terms_lower['Lower_Name']:
    compare_word1 = str(compare_word1)
    if type(compare_word1) == float:
      #print("float")
      continue
    edit_distance1 = editdistance.eval(word, compare_word1)
    # print("The compared word is " + compare_word1)
    # print("The compared word length is ", len(compare_word1))
    # print("The edit distance is ", edit_distance1)
    # print("The minimal length is ", min_length)
    if edit_distance1 >= min_length:
      continue
    else:
      tem_length = min(edit_distance1, len(word), len(compare_word1))
    # print("The compared word is " + compare_word1)
    # print("The compared word length is ", len(compare_word1))
    # print("The edit distance is ", edit_distance1)
    # print("The smallest is ", min_length)
      if tem_length == edit_distance1 and edit_distance1 <= (min(len(word), len(compare_word1))/2):
        label = compare_word1
        min_length = tem_length
      #print("New label is " + label)
  for compare_word2 in comparison_terms_lower['Lower_Reverse_Name']:
    if type(compare_word2) == float:
      continue
    edit_distance2 = editdistance.eval(word, compare_word2)
    # print("The compared word is " + compare_word2)
    # print("The compared word length is ", len(compare_word2))
    # print("The edit distance is ", edit_distance2)
    # print("The minimal length is ", min_length)
    if edit_distance2 >= min_length:
      continue
    else:
      tem_length = min(edit_distance2, len(word), len(compare_word2))
      #print("The Current tem_length is ", tem_length)
      if tem_length == edit_distance2 and edit_distance2 < (min(len(word), len(compare_word2))/2):
        label = compare_word2
        min_length = tem_length
  #print("label for this " + word + " is " + label)
  if label != 'NaN':
    matching_rows = comparison_terms_lower[
            (comparison_terms_lower['Lower_Name'] == label) |
            (comparison_terms_lower['Lower_Reverse_Name'] == label)
        ]
    if len(matching_rows) > 0:
      primary_name = matching_rows['Primary_Name'].values[0]
      dict_word2[word] = primary_name
    else:
      dict_word2[word] = label
  else:
    dict_word2[word] = label

pd_dict_word20000 = pd.DataFrame.from_dict(dict_word2, orient = 'index' )

pd_dict_word20000.to_csv('data20000_categories.csv')